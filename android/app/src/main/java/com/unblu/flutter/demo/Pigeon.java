// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.unblu.flutter.demo;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PersonInfo {
      public PersonInfo(@NonNull String id, @NonNull String displayName) {
          this.id = id;
          this.displayName = displayName;
      }

      private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String displayName;

    public @NonNull String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"displayName\" is null.");
      }
      this.displayName = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PersonInfo() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@NonNull String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      public @NonNull PersonInfo build() {
        PersonInfo pigeonReturn = new PersonInfo();
        pigeonReturn.setId(id);
        pigeonReturn.setDisplayName(displayName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(id);
      toListResult.add(displayName);
      return toListResult;
    }

    static @NonNull PersonInfo fromList(@NonNull ArrayList<Object> list) {
      PersonInfo pigeonResult = new PersonInfo();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object displayName = list.get(1);
      pigeonResult.setDisplayName((String) displayName);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class UnbluFlutterToVisitorHostApiCodec extends StandardMessageCodec {
    public static final UnbluFlutterToVisitorHostApiCodec INSTANCE = new UnbluFlutterToVisitorHostApiCodec();

    private UnbluFlutterToVisitorHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PersonInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PersonInfo) {
        stream.write(128);
        writeValue(stream, ((PersonInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface UnbluFlutterToVisitorHostApi {

    void createVisitor(@NonNull Result<Boolean> result);

    void deinitializeVisitor(@NonNull Result<Boolean> result);

    void isInitialized(@NonNull Result<Boolean> result);

    @Nullable 
    PersonInfo getPersonInfo();

    @NonNull 
    Long getUnreadMessagesCount();

    @NonNull 
    Boolean isDeInitialized();

    void openConversation(@NonNull String conversationId, @NonNull Result<Boolean> result);

    void openConversationOverview(@NonNull Result<Boolean> result);

    void setAccessToken(@NonNull String token);

    void setCustomCookies(@NonNull Map<String, String> customCookies);

    /** The codec used by UnbluFlutterToVisitorHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return UnbluFlutterToVisitorHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `UnbluFlutterToVisitorHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable UnbluFlutterToVisitorHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.createVisitor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createVisitor(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.deinitializeVisitor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.deinitializeVisitor(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.isInitialized", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isInitialized(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.getPersonInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PersonInfo output = api.getPersonInfo();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.getUnreadMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getUnreadMessagesCount();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.isDeInitialized", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isDeInitialized();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.openConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationIdArg = (String) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.openConversation(conversationIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.openConversationOverview", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.openConversationOverview(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.setAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String tokenArg = (String) args.get(0);
                try {
                  api.setAccessToken(tokenArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UnbluFlutterToVisitorHostApi.setCustomCookies", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Map<String, String> customCookiesArg = (Map<String, String>) args.get(0);
                try {
                  api.setCustomCookies(customCookiesArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class UnbluVisitorHostToFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public UnbluVisitorHostToFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by UnbluVisitorHostToFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void showUnblu(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.showUnblu", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void hideUnblu(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.hideUnblu", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void handleBackButton(@NonNull Boolean hasBackStackArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.handleBackButton", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(hasBackStackArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void displayMessage(@NonNull String messageArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.displayMessage", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> callback.reply(null));
    }
    public void updateUnreadMessage(@NonNull Long updateUnreadMessagesArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.updateUnreadMessage", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(updateUnreadMessagesArg)),
          channelReply -> callback.reply(null));
    }
    public void onAgentAvailable(@NonNull Boolean isAvailableArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.onAgentAvailable", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(isAvailableArg)),
          channelReply -> callback.reply(null));
    }
    public void onUnbluError(@NonNull String errorTypeArg, @NonNull String messageArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.onUnbluError", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(errorTypeArg, messageArg)),
          channelReply -> callback.reply(null));
    }
    public void onVisitorInitChanged(@NonNull Boolean initStateArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.UnbluVisitorHostToFlutterApi.onVisitorInitChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(initStateArg)),
          channelReply -> callback.reply(null));
    }
  }
}
